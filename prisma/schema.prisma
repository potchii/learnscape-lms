// LearnScape - Production Prisma Schema
// PostgreSQL + Prisma + Next.js + Supabase

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------
// ENUMS
// ------------------------------------

enum Role {
  APPLICANT
  STUDENT
  PARENT
  TEACHER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum ApplicantType {
  NEW
  CONTINUING
  RETURNEE
  TRANSFEREE
}

enum MaterialType {
  VIDEO
  IMAGE
  DOCUMENT
  LINK
}

enum ApplicationStatus {
  PENDING // Application submitted, awaiting review
  UNDER_REVIEW // Currently being reviewed by admin
  APPROVED // Application accepted, student created
  REJECTED // Application denied
  WAITLISTED // Application on hold
}

enum AssignmentStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum SubmissionStatus {
  NOT_SUBMITTED
  SUBMITTED
  LATE
  GRADED
}

// ------------------------------------
// CORE USER MODEL
// ------------------------------------

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name")
  middleName   String?  @map("middle_name")
  lastName     String   @map("last_name")
  gender       Gender
  birthdate    DateTime
  address      String
  phoneNumber  String?  @map("phone_number")
  role         Role
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  applicant Applicant?
  parent    Parent?
  student   Student?
  teacher   Teacher?
  admin     Admin?

  messagesSent     Message[]          @relation("MessagesSent")
  messagesReceived Message[]          @relation("MessagesReceived")
  MaterialView     MaterialView[]
  AnnouncementView AnnouncementView[]
}

// ------------------------------------
// ROLE TABLES
// ------------------------------------

model Applicant {
  id              String            @id @default(cuid())
  userId          String            @unique @map("user_id")
  type            ApplicantType     @default(NEW) // ðŸ‘ˆ New field
  status          ApplicationStatus @default(PENDING)
  applicantNumber String            @unique @map("applicant_number")
  referenceCode   String            @unique @map("reference_code")
  personalInfo    String?           @map("personal_info")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
}

model IdCounter {
  id         String   @id @default(cuid())
  type       String // e.g. "STUDENT", "PARENT", "TEACHER"
  year       Int
  lastNumber Int      @default(0)
  updatedAt  DateTime @updatedAt

  @@unique([type, year]) // ensure only one counter per type per year
}

model Parent {
  id           String    @id @default(cuid())
  userId       String    @unique @map("user_id")
  user         User      @relation(fields: [userId], references: [id])
  parentNumber String    @unique @map("parent_number")
  students     Student[]
  alerts       Alert[]
}

model Section {
  id         String    @id @default(cuid())
  gradeLevel Int       @map("grade_level")
  name       String
  students   Student[]
  classes    Class[]
}

model Student {
  id            String @id @default(cuid())
  userId        String @unique @map("user_id")
  parentId      String @map("parent_id")
  sectionId     String @map("section_id")
  studentNumber String @unique @map("student_number")

  user    User    @relation(fields: [userId], references: [id])
  parent  Parent  @relation(fields: [parentId], references: [id])
  section Section @relation(fields: [sectionId], references: [id])

  attendance           Attendance[]
  grades               Grade[]
  AssignmentSubmission AssignmentSubmission[]
}

model Teacher {
  id               String             @id @default(cuid())
  userId           String             @unique @map("user_id")
  user             User               @relation(fields: [userId], references: [id])
  employeeNumber   String             @unique @map("employee_number")
  joinedDate       DateTime           @default(now()) @map("joined_date")
  classes          Class[]
  attendance       Attendance[]
  grades           Grade[]
  LearningMaterial LearningMaterial[]
  Announcement     Announcement[]
  Assignment       Assignment[]
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
}

// ------------------------------------
// ACADEMIC STRUCTURE
// ------------------------------------

model Class {
  id          String  @id @default(cuid())
  subjectName String  @map("subject_name")
  sectionId   String  @map("section_id")
  teacherId   String  @map("teacher_id")
  schedule    String?

  section           Section            @relation(fields: [sectionId], references: [id])
  teacher           Teacher            @relation(fields: [teacherId], references: [id])
  attendance        Attendance[]
  grades            Grade[]
  learningMaterials LearningMaterial[] @relation("ClassMaterials") // Fixed this line
  announcements     Announcement[]     @relation("ClassAnnouncements") // Fixed this line
  Assignment        Assignment[]
}

// ------------------------------------
// ATTENDANCE
// ------------------------------------

model Attendance {
  id        String           @id @default(cuid())
  studentId String           @map("student_id")
  classId   String           @map("class_id")
  teacherId String           @map("teacher_id")
  date      DateTime
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime         @default(now()) @map("created_at")

  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])
}

// ------------------------------------
// GRADES
// ------------------------------------

model Grade {
  id        String   @id @default(cuid())
  studentId String   @map("student_id")
  classId   String   @map("class_id")
  teacherId String   @map("teacher_id")
  score     Float
  remarks   String?
  gradedAt  DateTime @default(now()) @map("graded_at")

  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])
}

// ------------------------------------
// ALERTS & MESSAGES
// ------------------------------------

model Alert {
  id        String   @id @default(cuid())
  parentId  String   @map("parent_id")
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  viewed    Boolean  @default(false)

  parent Parent @relation(fields: [parentId], references: [id])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  content    String
  sentAt     DateTime @default(now()) @map("sent_at")

  sender   User @relation("MessagesSent", fields: [senderId], references: [id])
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id])
}

// for learning materials and announcements
model LearningMaterial {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        MaterialType
  url         String
  teacherId   String       @map("teacher_id")
  classId     String?      @map("class_id")
  createdAt   DateTime     @default(now()) @map("created_at")

  teacher Teacher        @relation(fields: [teacherId], references: [id])
  class   Class?         @relation("ClassMaterials", fields: [classId], references: [id]) // Add relation name
  views   MaterialView[]
}

model Assignment {
  id          String           @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime         @map("due_date")
  maxScore    Int?             @map("max_score")
  status      AssignmentStatus @default(PUBLISHED)
  classId     String           @map("class_id")
  teacherId   String           @map("teacher_id")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  class       Class                  @relation(fields: [classId], references: [id])
  teacher     Teacher                @relation(fields: [teacherId], references: [id])
  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id           String           @id @default(cuid())
  assignmentId String           @map("assignment_id")
  studentId    String           @map("student_id")
  fileUrl      String?          @map("file_url")
  submittedAt  DateTime?        @map("submitted_at")
  status       SubmissionStatus @default(NOT_SUBMITTED)
  score        Int?
  feedback     String?
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  student    Student    @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

model MaterialView {
  id         String   @id @default(cuid())
  materialId String   @map("material_id")
  userId     String   @map("user_id")
  viewedAt   DateTime @default(now()) @map("viewed_at")

  material LearningMaterial @relation(fields: [materialId], references: [id])
  user     User             @relation(fields: [userId], references: [id])

  @@unique([materialId, userId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  teacherId String   @map("teacher_id")
  classId   String?  @map("class_id")
  createdAt DateTime @default(now()) @map("created_at")

  teacher Teacher            @relation(fields: [teacherId], references: [id])
  class   Class?             @relation("ClassAnnouncements", fields: [classId], references: [id]) // Add relation name
  views   AnnouncementView[]
}

model AnnouncementView {
  id             String   @id @default(cuid())
  announcementId String   @map("announcement_id")
  userId         String   @map("user_id")
  viewedAt       DateTime @default(now()) @map("viewed_at")

  announcement Announcement @relation(fields: [announcementId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([announcementId, userId])
}
